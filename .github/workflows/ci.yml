name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vehicle_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma migrate deploy

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm test -- --coverage

      - name: Upload coverage reports (backend)
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage reports (frontend)
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Compute short SHA
        id: meta
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Assert required secrets
        run: |
          test -n "${{ secrets.VPS_SSH_KEY }}" || (echo "Missing VPS_SSH_KEY"; exit 1)
          test -n "${{ secrets.VPS_HOST }}" || (echo "Missing VPS_HOST"; exit 1)
          test -n "${{ secrets.VPS_USERNAME }}" || (echo "Missing VPS_USERNAME"; exit 1)

      - name: Simple Deploy (idempotent)
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: false
          envs: GITHUB_SHA,DOMAIN,POSTGRES_PASSWORD,DOCKER_USERNAME
          script: |
            #!/usr/bin/env bash
            set -u
            APP="/opt/vehicle-tracker"
            COMMIT="${GITHUB_SHA}"
            ME="$(id -un)"

            echo "=== Deploy start ==="
            echo "DOMAIN=${DOMAIN:-<empty>}  COMMIT=$COMMIT"

            # 0) Ensure curl
            if ! command -v curl >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y curl ca-certificates gnupg || true
            fi

            # 1) Install Docker (simple path)
            if ! command -v docker >/dev/null 2>&1; then
              echo "[docker] installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker "$ME" || true
              rm -f get-docker.sh
            else
              echo "[docker] already installed"
            fi

            # 2) Prepare dir
            sudo mkdir -p "$APP/nginx/ssl"
            sudo chown -R "$ME":"$(id -gn "$ME")" "$APP"

            # 3) .env (always recreate to fix malformed files)
            echo "[env] recreating $APP/.env with proper quoting"
            PG_PASS="${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}"
            JWT="${JWT_SECRET:-$(openssl rand -base64 64)}"
            JWT_R="${JWT_REFRESH_SECRET:-$(openssl rand -base64 64)}"
            DOM_VAL="${DOMAIN:-example.com}"
            DOCKER_USERNAME="${DOCKER_USERNAME}"
            {
              echo "POSTGRES_PASSWORD=\"${PG_PASS}\""
              echo "JWT_SECRET=\"${JWT}\""
              echo "JWT_REFRESH_SECRET=\"${JWT_R}\""
              echo "DOMAIN=\"${DOM_VAL}\""
              echo "DOCKER_USERNAME=\"${DOCKER_USERNAME}\""
            } > "$APP/.env"

            # shellcheck disable=SC1091
            set -a; . "$APP/.env"; set +a
            echo "[env] effective DOMAIN=${DOMAIN:-<empty>} (from .env)"

            # 4) Fetch compose & nginx from same commit
            echo "[fetch] docker-compose.prod.yml @ $COMMIT"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/docker-compose.prod.yml" -o "$APP/docker-compose.prod.yml"
            echo "[fetch] nginx.conf @ $COMMIT"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/nginx/nginx.conf" -o "$APP/nginx/nginx.conf" || true
            # inject ${DOMAIN} if present
            if grep -q '\${DOMAIN}' "$APP/nginx/nginx.conf" 2>/dev/null; then
              sed -i "s|\${DOMAIN}|${DOMAIN}|g" "$APP/nginx/nginx.conf"
            fi

            # 4.5) Generate Let's Encrypt certificates if they don't exist
            if [ ! -f "$APP/nginx/ssl/fullchain.pem" ] && [ -n "${DOMAIN:-}" ] && [ "$DOMAIN" != "example.com" ]; then
              echo "[ssl] generating Let's Encrypt certificates for $DOMAIN"
              
              # Install certbot if not present
              if ! command -v certbot >/dev/null 2>&1; then
                sudo apt-get update -y
                sudo apt-get install -y certbot
              fi
              
              # Stop any running nginx to free port 80
              sudo docker compose -f docker-compose.prod.yml stop nginx || true
              
              # Generate certificate using standalone mode
              sudo certbot certonly --standalone --non-interactive --agree-tos \
                --email "admin@${DOMAIN}" \
                -d "${DOMAIN}" -d "www.${DOMAIN}" || {
                echo "[ssl] Let's Encrypt failed, generating self-signed certificate"
                sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                  -keyout "$APP/nginx/ssl/privkey.pem" \
                  -out "$APP/nginx/ssl/fullchain.pem" \
                  -subj "/C=US/ST=State/L=City/O=Organization/CN=${DOMAIN}"
              }
              
              # Copy Let's Encrypt certificates if they were generated
              if [ -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
                sudo cp "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" "$APP/nginx/ssl/"
                sudo cp "/etc/letsencrypt/live/${DOMAIN}/privkey.pem" "$APP/nginx/ssl/"
                sudo chown -R "$ME":"$(id -gn "$ME")" "$APP/nginx/ssl"
              fi
            else
              echo "[ssl] certificates already exist or domain not configured"
            fi

            # 5) Deploy (always use sudo docker until next login)
            cd "$APP"
            echo "[compose] pulling images…"
            sudo docker compose -f docker-compose.prod.yml pull || true

            # (Optional) prisma migrate — run one-off container; safe-fail
            echo "[migrate] running prisma migrate (non-fatal on fail)"
            sudo docker compose -f docker-compose.prod.yml run --rm backend npm run prisma:migrate:deploy || true

            echo "[compose] up -d…"
            sudo docker compose -f docker-compose.prod.yml up -d || true

            echo "[docker] prune old images"
            sudo docker image prune -f || true

            # 6) Setup certificate renewal cron job
            if [ -n "${DOMAIN:-}" ] && [ "$DOMAIN" != "example.com" ]; then
              echo "[ssl] setting up certificate renewal"
              # Create renewal script
              sudo tee /usr/local/bin/renew-certs.sh > /dev/null << 'EOF'
            #!/bin/bash
            APP="/opt/vehicle-tracker"
            cd "$APP"

            # Stop nginx to free port 80
            docker compose -f docker-compose.prod.yml stop nginx

            # Renew certificates
            certbot renew --standalone --quiet

            # Copy renewed certificates
            if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
              cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" "$APP/nginx/ssl/"
              cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" "$APP/nginx/ssl/"
            fi

            # Restart nginx
            docker compose -f docker-compose.prod.yml start nginx
            EOF
              sudo chmod +x /usr/local/bin/renew-certs.sh
              
              # Add to crontab if not already present
              (sudo crontab -l 2>/dev/null | grep -v renew-certs; echo "0 3 * * * /usr/local/bin/renew-certs.sh") | sudo crontab -
            fi

            echo "✅ Deployment complete!"
