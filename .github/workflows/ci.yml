name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vehicle_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test

      - name: Run backend tests
        working-directory: ./backend
        run: npm test -- --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload frontend coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Check Docker Hub credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "‚ùå ERROR: Docker Hub credentials not found!"
            echo ""
            echo "Please set the following GitHub repository secrets:"
            echo "  - DOCKER_USERNAME: Your Docker Hub username"
            echo "  - DOCKER_PASSWORD: Your Docker Hub access token"
            echo ""
            echo "Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
            echo "See README.md for detailed instructions."
            exit 1
          fi
          echo "‚úÖ Docker Hub credentials found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:latest
          target: production

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:latest
          target: production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check VPS deployment credentials
        run: |
          if [ -z "${{ secrets.VPS_HOST }}" ] || [ -z "${{ secrets.VPS_USERNAME }}" ] || [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "‚ùå ERROR: VPS deployment credentials not found!"
            echo ""
            echo "Please set the following GitHub repository secrets:"
            echo "  - VPS_HOST: Your VPS IP address or domain"
            echo "  - VPS_USERNAME: Your VPS username (e.g., root, ubuntu)"
            echo "  - VPS_SSH_KEY: Your private SSH key content"
            echo ""
            echo "Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
            echo "See README.md for detailed instructions."
            echo ""
            echo "‚ö†Ô∏è  Skipping deployment step..."
            exit 0
          fi
          echo "‚úÖ VPS deployment credentials found"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/vehicle-tracker
            docker-compose pull
            docker-compose up -d
            docker system prune -f

  check-deployment-setup:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Check deployment configuration
        run: |
          echo "üîç Checking deployment configuration..."
          echo ""

          # Check Docker Hub credentials
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "‚ùå Docker Hub credentials missing"
            echo "   Required: DOCKER_USERNAME, DOCKER_PASSWORD"
            MISSING_CREDS=true
          else
            echo "‚úÖ Docker Hub credentials configured"
          fi

          # Check VPS credentials
          if [ -z "${{ secrets.VPS_HOST }}" ] || [ -z "${{ secrets.VPS_USERNAME }}" ] || [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "‚ùå VPS deployment credentials missing"
            echo "   Required: VPS_HOST, VPS_USERNAME, VPS_SSH_KEY"
            MISSING_CREDS=true
          else
            echo "‚úÖ VPS deployment credentials configured"
          fi

          if [ "$MISSING_CREDS" = true ]; then
            echo ""
            echo "üìñ Setup Instructions:"
            echo "1. Go to your GitHub repository"
            echo "2. Click Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "3. Click 'New repository secret' for each missing credential"
            echo "4. See README.md for detailed setup instructions"
            echo ""
            echo "üöÄ Once configured, push to master branch to trigger deployment!"
          else
            echo ""
            echo "üéâ All deployment credentials are configured!"
            echo "üöÄ Deployment will proceed automatically."
          fi
