name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vehicle_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma migrate deploy

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm test -- --coverage

      - name: Upload coverage reports (backend)
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage reports (frontend)
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Compute short SHA
        id: meta
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          # target: production
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Assert required secrets
        run: |
          test -n "${{ secrets.VPS_SSH_KEY }}" || (echo "Missing VPS_SSH_KEY"; exit 1)
          test -n "${{ secrets.VPS_HOST }}" || (echo "Missing VPS_HOST"; exit 1)
          test -n "${{ secrets.VPS_USERNAME }}" || (echo "Missing VPS_USERNAME"; exit 1)

      - name: Deploy (bootstrap-on-deploy, safe bash -lc)
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA,DOMAIN,POSTGRES_PASSWORD,JWT_SECRET,JWT_REFRESH_SECRET
          script: |
            bash -lc '
            set -Eeuo pipefail
            trap "echo \"‚ùå Error on line \$LINENO\"; exit 1" ERR
            set -x

            APP="/opt/vehicle-tracker"
            COMMIT="${GITHUB_SHA}"
            ME="$(id -un)"

            echo "ENV DOMAIN=${DOMAIN:-<empty>}"
            echo "ENV POSTGRES_PASSWORD=${POSTGRES_PASSWORD:+***set***}"
            echo "ENV JWT_SECRET=${JWT_SECRET:+***set***}"
            echo "ENV JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:+***set***}"

            # 0) base tools
            set +e
            command -v curl >/dev/null 2>&1
            CURL_EXISTS=$?
            set -e
            if [ $CURL_EXISTS -ne 0 ]; then
              sudo apt-get update -y
              sudo apt-get install -y curl ca-certificates gnupg
            fi

            # 1) Docker Engine + compose plugin (idempotent)
            set +e
            command -v docker >/dev/null 2>&1
            DOCKER_EXISTS=$?
            set -e
            if [ $DOCKER_EXISTS -ne 0 ]; then
              echo "Installing Docker Engine..."
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              . /etc/os-release
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker "$ME" || true
              echo "Docker installation completed."
            else
              echo "Docker already installed."
            fi

            # 2) Directories
            sudo mkdir -p "$APP/nginx/ssl"
            sudo chown -R "$ME":"$ME" "$APP"

            # 3) .env (create once; prefer secrets if provided)
            if [ ! -f "$APP/.env" ]; then
              echo "Creating .env..."
              PG_PASS_VAL="${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}"
              JWT_VAL="${JWT_SECRET:-$(openssl rand -base64 64)}"
              JWT_R_VAL="${JWT_REFRESH_SECRET:-$(openssl rand -base64 64)}"
              DOMAIN_VAL="${DOMAIN:-example.com}"
              {
                echo "POSTGRES_PASSWORD=${PG_PASS_VAL}"
                echo "JWT_SECRET=${JWT_VAL}"
                echo "JWT_REFRESH_SECRET=${JWT_R_VAL}"
                echo "DOMAIN=${DOMAIN_VAL}"
              } > "$APP/.env"
            fi

            set -a
            . "$APP/.env"
            set +a

            # 4) TLS first issue (guarded)
            SKIP_TLS=0
            if [ -z "${DOMAIN:-}" ] || [ "$DOMAIN" = "example.com" ]; then
              echo "Skipping TLS issue (DOMAIN is empty/example.com)."
              SKIP_TLS=1
            fi

            if [ "$SKIP_TLS" -eq 0 ] && { [ ! -f "$APP/nginx/ssl/fullchain.pem" ] || [ ! -f "$APP/nginx/ssl/privkey.pem" ]; }; then
              echo "Issuing Let'\''s Encrypt cert for ${DOMAIN}..."
              set +e
              command -v certbot >/dev/null 2>&1
              CERTBOT_EXISTS=$?
              set -e
              if [ $CERTBOT_EXISTS -ne 0 ]; then
                sudo apt-get update -y && sudo apt-get install -y certbot
              fi
              sudo fuser -k 80/tcp || true
              sudo fuser -k 443/tcp || true
              sudo certbot certonly --standalone -d "${DOMAIN}" -d "www.${DOMAIN}" --agree-tos -m "you@example.com" --non-interactive
              sudo cp /etc/letsencrypt/live/${DOMAIN}/fullchain.pem "$APP/nginx/ssl/fullchain.pem"
              sudo cp /etc/letsencrypt/live/${DOMAIN}/privkey.pem   "$APP/nginx/ssl/privkey.pem"
              sudo chown -R "$ME":"$ME" "$APP/nginx/ssl"
            else
              echo "TLS step skipped or already present."
            fi

            # 5) Fetch compose & nginx from the same commit
            echo "Fetching compose & nginx from commit ${COMMIT}..."
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/docker-compose.prod.yml" -o "$APP/docker-compose.prod.yml"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/nginx/nginx.conf" -o "$APP/nginx/nginx.conf"

            # inject DOMAIN if template uses ${DOMAIN}
            if grep -q "\${DOMAIN}" "$APP/nginx/nginx.conf"; then
              sed -i "s|\${DOMAIN}|${DOMAIN}|g" "$APP/nginx/nginx.conf"
            fi

            # 6) Deploy (pull-only)
            cd "$APP"
            docker compose -f docker-compose.prod.yml pull

            docker compose -f docker-compose.prod.yml run --rm backend npm run prisma:migrate:deploy || true

            docker compose -f docker-compose.prod.yml up -d
            docker image prune -f || true

            echo "‚úÖ Deploy complete ‚Üí https://${DOMAIN:-example.com}"
            '
