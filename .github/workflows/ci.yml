name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vehicle_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma migrate deploy

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm test -- --coverage

      - name: Upload coverage reports (backend)
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage reports (frontend)
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Compute short SHA
        id: meta
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Assert required secrets
        run: |
          test -n "${{ secrets.VPS_SSH_KEY }}" || (echo "Missing VPS_SSH_KEY"; exit 1)
          test -n "${{ secrets.VPS_HOST }}" || (echo "Missing VPS_HOST"; exit 1)
          test -n "${{ secrets.VPS_USERNAME }}" || (echo "Missing VPS_USERNAME"; exit 1)

      - name: Simple Deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET || '' }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET || '' }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: false
          envs: GITHUB_SHA,DOMAIN,POSTGRES_PASSWORD,JWT_SECRET,JWT_REFRESH_SECRET
          script: |
            #!/bin/bash
            
            APP="/opt/vehicle-tracker"
            COMMIT="${GITHUB_SHA}"
            
            echo "=== Starting deployment ==="
            echo "DOMAIN: ${DOMAIN:-<empty>}"
            
            # Install Docker if needed (simple method)
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $(whoami)
              rm get-docker.sh
            else
              echo "Docker already installed"
            fi
            
            # Create directories
            sudo mkdir -p "$APP"
            sudo chown -R $(whoami):$(whoami) "$APP"
            
            # Create .env file
            if [ ! -f "$APP/.env" ]; then
              echo "Creating .env file..."
              cat > "$APP/.env" << EOF
            POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}
            JWT_SECRET=${JWT_SECRET:-$(openssl rand -base64 64)}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-$(openssl rand -base64 64)}
            DOMAIN=${DOMAIN:-example.com}
            EOF
            fi
            
            # Download compose file
            echo "Downloading docker-compose.prod.yml..."
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/docker-compose.prod.yml" -o "$APP/docker-compose.prod.yml"
            
            # Deploy
            cd "$APP"
            echo "Pulling latest images..."
            docker compose -f docker-compose.prod.yml pull || true
            
            echo "Starting services..."
            docker compose -f docker-compose.prod.yml up -d || true
            
            echo "Running database migrations..."
            sleep 10
            docker compose -f docker-compose.prod.yml exec -T backend npm run prisma:migrate:deploy || echo "Migration failed, continuing..."
            
            echo "Cleaning up old images..."
            docker image prune -f || true
            
            echo "âœ… Deployment complete!"