name: CI/CD Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vehicle_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
        run: npx prisma migrate deploy

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vehicle_tracker_test
          JWT_SECRET: test-jwt-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: npm test -- --coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Lint backend code
        working-directory: ./backend
        run: npm run lint

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-and-push:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Compute short SHA
        id: meta
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-backend:${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/vehicle-tracker-frontend:${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Assert required secrets
        run: |
          test -n "${{ secrets.VPS_SSH_KEY }}" || (echo "Missing VPS_SSH_KEY"; exit 1)
          test -n "${{ secrets.VPS_HOST }}" || (echo "Missing VPS_HOST"; exit 1)
          test -n "${{ secrets.VPS_USERNAME }}" || (echo "Missing VPS_USERNAME"; exit 1)

      - name: Simple Deploy (idempotent)
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: false
          envs: GITHUB_SHA,DOMAIN,POSTGRES_PASSWORD,DOCKER_USERNAME
          script: |
            #!/usr/bin/env bash
            set -u
            APP="/opt/vehicle-tracker"
            COMMIT="${GITHUB_SHA}"
            ME="$(id -un)"

            echo "=== Deploy start ==="
            echo "DOMAIN=${DOMAIN:-<empty>}  COMMIT=$COMMIT"

            # 0) Ensure curl
            if ! command -v curl >/dev/null 2>&1; then
              sudo apt-get update -y && sudo apt-get install -y curl ca-certificates gnupg || true
            fi

            # 1) Install Docker (simple path)
            if ! command -v docker >/dev/null 2>&1; then
              echo "[docker] installing..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker "$ME" || true
              rm -f get-docker.sh
            else
              echo "[docker] already installed"
            fi

            # 2) Prepare dir
            sudo mkdir -p "$APP/nginx/ssl"
            sudo chown -R "$ME":"$(id -gn "$ME")" "$APP"

            # 3) .env (always recreate to fix malformed files)
            echo "[env] recreating $APP/.env with proper quoting"
            PG_PASS="${POSTGRES_PASSWORD:-$(openssl rand -base64 32 | tr -d '\n')}"
            JWT="${JWT_SECRET:-$(openssl rand -hex 32)}"
            JWT_R="${JWT_REFRESH_SECRET:-$(openssl rand -hex 32)}"
            DOM_VAL="${DOMAIN:-example.com}"
            DOCKER_USERNAME="${DOCKER_USERNAME}"
            {
              echo "POSTGRES_PASSWORD=\"${PG_PASS}\""
              echo "JWT_SECRET=\"${JWT}\""
              echo "JWT_REFRESH_SECRET=\"${JWT_R}\""
              echo "DOMAIN=\"${DOM_VAL}\""
              echo "DOCKER_USERNAME=\"${DOCKER_USERNAME}\""
            } > "$APP/.env"

            # Debug: show .env file contents (without sensitive values)
            echo "[env] .env file created with $(wc -l < "$APP/.env") lines"
            echo "[env] POSTGRES_PASSWORD length: ${#PG_PASS}"

            # shellcheck disable=SC1091
            set -a; . "$APP/.env"; set +a
            echo "[env] effective DOMAIN=${DOMAIN:-<empty>} (from .env)"

            # 4) Fetch files from repo
            echo "[fetch] downloading deployment files @ $COMMIT"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/docker-compose.prod.yml" -o "$APP/docker-compose.prod.yml"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/scripts/setup-ssl.sh" -o "$APP/setup-ssl.sh"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/scripts/generate-nginx-config.sh" -o "$APP/generate-nginx-config.sh"
            curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/scripts/run-migration.sh" -o "$APP/run-migration.sh"
            chmod +x "$APP/setup-ssl.sh" "$APP/generate-nginx-config.sh" "$APP/run-migration.sh"

            # 5) Setup SSL and generate nginx config
            echo "[ssl] setting up SSL certificates"
            sudo "$APP/setup-ssl.sh" "${DOMAIN}"

            echo "[nginx] generating nginx configuration"
            sudo "$APP/generate-nginx-config.sh" "${DOMAIN}"

            # 6) Deploy (always use sudo docker until next login)
            cd "$APP"

            # Debug: show environment variables
            echo "[debug] checking environment variables"
            echo "POSTGRES_PASSWORD is set: $([ -n "${POSTGRES_PASSWORD:-}" ] && echo "yes" || echo "no")"
            echo "DATABASE_URL would be: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vehicle_tracker"

            echo "[compose] pulling images…"
            sudo docker compose -f docker-compose.prod.yml --env-file .env pull || true

            # (Optional) prisma migrate — run one-off container; safe-fail
            echo "[migrate] running prisma migrate (non-fatal on fail)"
            sudo "$APP/run-migration.sh" || echo "[migrate] migration failed, will retry after containers are up"

            echo "[compose] up -d…"
            sudo docker compose -f docker-compose.prod.yml --env-file .env up -d || true

            # Wait for services to be healthy
            echo "[health] waiting for services to be healthy..."
            sleep 15

            # Check container status
            echo "[debug] container status:"
            sudo docker compose -f docker-compose.prod.yml --env-file .env ps

            # Check nginx logs
            echo "[debug] nginx logs (last 10 lines):"
            sudo docker compose -f docker-compose.prod.yml --env-file .env logs --tail=10 nginx || true

            # Check if ports are listening
            echo "[debug] checking if ports are listening:"
            sudo netstat -tlnp | grep -E ":80|:443" || echo "No HTTP/HTTPS ports found"

            # Test local connectivity
            echo "[debug] testing local connectivity:"
            curl -I http://localhost/ || echo "HTTP connection failed"
            curl -I -k https://localhost/ || echo "HTTPS connection failed"

            # Wait for backend to be healthy, then try migration again if it failed
            echo "[migrate] waiting for backend to be healthy..."
            for i in {1..30}; do
              if sudo docker compose -f docker-compose.prod.yml --env-file .env ps backend | grep -q "healthy"; then
                echo "[migrate] backend is healthy, trying migration and seeding again"
                sudo docker compose -f docker-compose.prod.yml --env-file .env exec backend npx prisma migrate deploy || echo "[migrate] migration failed again, continuing..."
                echo "[seed] running database seeding..."
                sudo docker compose -f docker-compose.prod.yml --env-file .env exec backend npm run db:seed || echo "[seed] seeding failed, continuing..."
                break
              fi
              echo "[migrate] waiting... ($i/30)"
              sleep 10
            done

            echo "[docker] prune old images"
            sudo docker image prune -f || true

            # 7) Setup certificate renewal cron job
            if [ -n "${DOMAIN:-}" ] && [ "$DOMAIN" != "example.com" ]; then
              echo "[ssl] setting up certificate renewal"
              curl -fsSL "https://raw.githubusercontent.com/abdulhalimzhr/vehicletracker/${COMMIT}/scripts/renew-certs.sh" -o /usr/local/bin/renew-certs.sh
              sudo chmod +x /usr/local/bin/renew-certs.sh
              
              # Add to crontab if not already present
              (sudo crontab -l 2>/dev/null | grep -v renew-certs; echo "0 3 * * * DOMAIN=${DOMAIN} /usr/local/bin/renew-certs.sh") | sudo crontab -
            fi

            echo "✅ Deployment complete!"
